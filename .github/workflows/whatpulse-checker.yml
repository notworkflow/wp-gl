name: Check for WhatPulse Updates

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'

permissions:
  contents: write

jobs:
  check-and-release:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository_owner }}/alpine-helper:latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download and Verify AppImage
        id: verify
        run: |
          DIRECT_URL="https://releases.whatpulse.org/latest/linux/whatpulse-linux-latest_amd64.AppImage"
          echo "url=${DIRECT_URL}" >> "$GITHUB_OUTPUT"

          LATEST_HASH=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name || echo "no-previous-release")
          
          wget -q -O whatpulse.appimage "$DIRECT_URL"
          NEW_HASH=$(sha256sum whatpulse.appimage | awk '{ print $1 }')
          echo "new_hash=${NEW_HASH}" >> "$GITHUB_OUTPUT"
          
          if [[ "$NEW_HASH" == "$LATEST_HASH" ]]; then
            echo "File content is identical to the latest release. No update needed."
            echo "is_new=false" >> "$GITHUB_OUTPUT"
          else
            echo "File content has changed. A new release is required."
            echo "is_new=true" >> "$GITHUB_OUTPUT"
            zsyncmake -u "https://github.com/${{ github.repository }}/releases/download/${NEW_HASH}/whatpulse.appimage" whatpulse.appimage
          fi

      - name: Get current date
        if: steps.verify.outputs.is_new == 'true'
        id: get_date
        run: echo "date=$(date -u +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

      - name: Create New Release
        if: steps.verify.outputs.is_new == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.verify.outputs.new_hash }}
          name: WhatPulse Release - ${{ steps.get_date.outputs.date }}
          body: |
            Automated release of the latest WhatPulse AppImage with Zsync support for delta updates.
            - SHA256 Checksum: `${{ steps.verify.outputs.new_hash }}`
            - Original URL: `${{ steps.verify.outputs.url }}`
          files: |
            whatpulse.appimage
            whatpulse.appimage.zsync

      - name: Clean up Old Releases
        if: steps.verify.outputs.is_new == 'true'
        run: |
          # Add the repository as a safe directory for git commands
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

          NEW_TAG="${{ steps.verify.outputs.new_hash }}"
          echo "New release created. Cleaning up old releases (if any)..."
          
          # List all tags, filter out the new one, and loop through the rest to delete them.
          # The '|| true' ensures this command doesn't fail if grep finds no matches.
          OLD_TAGS=$(gh release list --json tagName --jq '.[].tagName' | grep -v "^${NEW_TAG}$" || true)

          if [[ -z "$OLD_TAGS" ]]; then
            echo "No old releases to delete."
          else
            echo "$OLD_TAGS" | while read -r old_tag; do
              if [[ -n "$old_tag" ]]; then
                echo "Deleting old release and tag: ${old_tag}"
                gh release delete "${old_tag}" --yes
              fi
            done
          fi
          
          echo "Cleanup complete."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
